/// @page cc_mqttsn_gw_session_page Session
/// @tableofcontents
/// The @b Session object is responsible to manage and forward traffic of
/// messages between @b single MQTT-SN client and the broker. When new message
/// is received over the I/O link, the driving code must check whether any
/// @b Session object has already been created for the client that sent the
/// message (the clients can be differentiated by their origin address). If
/// such @b Session does NOT exist, it must be created. 
///
/// The received data needs to be forwarded to appropriate @b Session object 
/// for processing. And when the @b Session object requests to send message
/// back, it needs to be sent to the right address. It is a responsibility of
/// the driving code to maintain a valid map between the client's address and
/// appropriate @b Session object.
///
/// @section cc_mqttsn_gw_session_page_alloc Allocation
/// When using @b C++ interface, just instantiate object of cc_mqttsn_gateway::Session
/// class. The destruction of the object will clean up all acquired resources.
/// @code
/// std::unique_ptr<cc_mqttsn_gateway::Session> session(new cc_mqttsn_gateway::Session());
/// 
/// // Using raw pointer to force doxygen to propely generate links to the 
/// // member functions in the code snippets below.
/// cc_mqttsn_gateway::Session* session = new cc_mqttsn_gateway::Session();
/// @endcode
///
/// When using @b C interface, the allocation is performed using cc_mqttsn_gw_session_alloc()
/// @code
/// CC_MqttsnSessionHandle handle = cc_mqttsn_gw_session_alloc();
/// @endcode
/// and de-allocation is performed using cc_mqttsn_gw_session_free() functions.
/// @code
/// cc_mqttsn_gw_session_free(handle);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_recv Receiving Data
/// The MQTT-SN gateway @b Session serves as message translator and forwarder between
/// MQTT-SN client and MQTT broker. The driver code is responsible to
/// manage these two independent communication links. Once a message is
/// received on any of them, it must be provided the the @b Session object
/// for processing.
///
/// @subsection cc_mqttsn_gw_session_page_recv_client Receiving Data from Client
/// @b C++ interface:
/// @code
/// std::size_t consumed = session->dataFromClient(buf, bufLen);
/// @endcode
/// 
/// @b C interface:
/// @code
/// unsigned consumed = cc_mqttsn_gw_session_data_from_client(handle, buf, bufLen);
/// @endcode
///
/// @b NOTE, that functions return number of bytes that were actually processed. 
/// If number of processed bytes is less that number of bytes residing in the 
/// buffer, then probably some unexpected protocol error has occurred.
///
/// The call to this function may cause invocation of various callback functions
/// that have been set.
///
/// @subsection cc_mqttsn_gw_session_page_recv_broker Receiving Data from Broker
/// @b C++ interface:
/// @code
/// std::size_t consumed = session->dataFromBroker(buf, bufLen);
/// @endcode
/// 
/// @b C interface:
/// @code
/// unsigned consumed = cc_mqttsn_gw_session_data_from_broker(handle, buf, bufLen);
/// @endcode
///
/// @b NOTE, that functions return number of bytes that were actually processed. 
/// If number of processed bytes is less that number of bytes residing in the 
/// buffer, then probably some unexpected protocol error has occurred.
///
/// The call to this function may cause invocation of various callback functions
/// that have been set.
///
/// @section cc_mqttsn_gw_session_page_send Sending Data
/// The @b Session object may require to send a message to either client or
/// broker. The driving code has to provide appropriate callbacks for this 
/// purpose. When the callback is invoked, it is provided with pointer to
/// data buffer. This buffer resides in internal data structures of the
/// @b Session object. After the callback returns, this buffer may be updated.
/// It means, that the driving code may require to copy the buffer to its
/// internal data structures to preserve the data intact until send over I/O
/// link operation is complete.
///
/// @subsection cc_mqttsn_gw_session_page_send_client Sending Data to Client
/// @b C++ interface:
/// @code
/// session->setSendDataClientReqCb(
///     [](const std::uint8_t* buf, std::size_t bufLen)
///     {
///         ... 
///     });
/// @endcode
///
/// @b C interface:
/// @code
/// void my_send_to_client(void* userData, CC_MqttsnSessionHandle session, const unsigned char* buf, unsigned bufLen)
/// {
///     ...
/// }
///
/// cc_mqttsn_gw_session_set_send_data_to_client_cb(handle, &my_send_to_client, someUserData);
/// @endcode
///
/// @subsection cc_mqttsn_gw_session_page_send_broker Sending Data to Broker
/// @b C++ interface:
/// @code
/// session->setSendDataBrokerReqCb(
///     [](const std::uint8_t* buf, std::size_t bufLen)
///     {
///         ... 
///     });
/// @endcode
///
/// @b C interface:
/// @code
/// void my_send_to_broker(void* userData, CC_MqttsnSessionHandle session, const unsigned char* buf, unsigned bufLen)
/// {
///     ...
/// }
///
/// cc_mqttsn_gw_session_set_send_data_to_broker_cb(handle, &my_send_to_broker, someUserData);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_time Time Measurement
/// The @b Session object may require to measure time to identify message delivery
/// timeouts. It relies on the driving code to provide such 
/// service. There is a need to set appropriate callback:
/// 
/// @b C++ interface:
/// @code
/// session.setNextTickProgramReqCb(
///     [](unsigned duration)
///     {
///         ... // Set timer to expire after duration milliseconds
///             // After expiry call session.tick()
///     });
/// @endcode
///
/// @b C interface:
/// @code
/// void my_tick_req(void* userData, CC_MqttsnSessionHandle session, unsigned duration)
/// {
///     ... /* Set timer to expire after duration milliseconds */
///     ... /* After expiry call cc_mqttsn_gw_session_tick() */
/// }
///
/// cc_mqttsn_gw_session_set_tick_req_cb(handle, &my_tick_req, someUserData);
/// @endcode
/// 
/// After the requested time expires, the driving code needs to notify the
/// @b Session object. It must call the appropriate @b tick() function.
///
/// @b C++ interface:
/// @code
/// session->tick();
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_tick(handle); 
/// @endcode
///
/// Based on some events, the @b Session object may require knowledge of elapsed time
/// since last tick programming request. For this purpose the driving code
/// must set a callback to cancel the existing time measurement and return
/// number of elapsed @b milliseconds.
///
/// @b C++ interface:
/// @code
/// session->setCancelTickWaitReqCb(
///     []() -> unsigned
///     {
///         ... // cancel timer
///         return ...; // return number of elapsed milliseconds
///     });
/// @endcode
///
/// @b C interface:
/// @code
/// unsigned my_cancel_timer_req(void* userData, CC_MqttsnSessionHandle session)
/// {
///     ... /* cancel timer */
///     return ...; /* return number of elapsed milliseconds */
/// }
///
/// cc_mqttsn_gw_session_set_cancel_tick_cb(handle, &my_cancel_timer_req, someUserData);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_term Session Termination
/// The @b Session object may recognise disconnection of MQTT-SN client and/or
/// MQTT broker. As the result the session object must be destructed immediately and
/// new one is created once the client renews its connection. The request to
/// terminate the session is performed via callback, which must be set by
/// the driving code.
/// 
/// @b C++ interface:
/// @code
/// session->setTerminationReqCb(
///     []()
///     {
///         ... // Destruct session object.
///     });
/// @endcode
/// 
/// @b C interface:
/// @code
/// void my_session_term(void* userData, CC_MqttsnSessionHandle session)
/// {
///     ... /* Remove reference to session object from internal data structures */
///     cc_mqttsn_gw_session_free(handle);
/// }
///
/// cc_mqttsn_gw_session_set_term_req_cb(handle, &my_session_term, someUserData);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_broker_reconnect Re-Connection to Broker
/// The @b MQTT-SN protocol specification defines messages and operations, that
/// are not properly supported by the @b MQTT protocol, such as will information
/// update. The @b Session object supports these kind of operations by sending updated
/// @b CONNECT request to the broker on behalf of the client. However, MQTT
/// protocol disallows multiple @b CONNECT messages in the single connection
/// session. As the result the gateway must perform the following steps:
///
/// -# send @b DISCONNECT message
/// -# close existing TCP/IP connection
/// -# open new TCP/IP connection
/// -# send new @b CONNECT message with updated connection information.
///
/// Due to the reason, that TCP/IP connection to the broker is managed by
/// the driving code, it must implement steps 2 and 3 in the list above.
///
/// The @b Session object issues the reconnection request via callback, which
/// must be provided by the driving code.
/// 
/// @b C++ interface
/// @code
/// session->setBrokerReconnectReqCb(
///     []()
///     {
///         ... // Close existing TCP/IP connection to broker and open a new one
///     });
/// @endcode
///
/// @b C interface
/// @code
/// void my_broker_reconnect(void* userData, CC_MqttsnSessionHandle session)
/// {
///     ... /* Close existing TCP/IP connection to broker and open a new one */
/// }
///
/// cc_mqttsn_gw_session_set_broker_reconnect_req_cb(handle, &my_broker_reconnect, someUserData);
/// @endcode
/// @b NOTE, that the updated connection statuses of the broker (first 
/// disconnected and then connected) must be reported to the @b Session object
/// when they happen. Details are in 
/// @ref cc_mqttsn_gw_session_page_broker_conn section below.
///
/// @section cc_mqttsn_gw_session_page_id Gateway ID
/// The MQTT-SN client may broadcast @b SEARCHGW message in an attempt to discover
/// existing gateways on the network. The @b Session object is responsible to 
/// send @b GWINFO message as a response. Such message contains numeric
/// gateway ID. Hence, the @b Session object must also be aware of the
/// gateway ID information:
///
/// @b C++ interface:
/// @code
/// session->setGatewayId(5);
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_set_id(handle, 5);
/// @endcode
///
/// It is also possible to retrieve the current configuration:
///
/// @b C++ interface:
/// @code
/// std::uint8_t id = session->getGatewayId();
/// @endcode
///
/// @b C interface:
/// @code
/// unsigned char id = cc_mqttsn_gw_session_get_id(gw);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_retry Retry Attempts
/// There are cases when the communication to either client or broker is 
/// driven by the @b Session object itself. Such communication may involve
/// messages that require acknowledgement by the other side. If acknowledgement
/// is not received in time, the message must be re-sent. The @b Session object
/// may be configured with duration (in @b seconds) between resend attempts and
/// total number of attempts to perform.
///
/// @b C++ interface:
/// @code
/// session->setRetryPeriod(5U); // 5 seconds between resend attempts
/// session->setRetryCount(4U); // up to 4 attempts to resend the same message
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_set_retry_period(handle, 5U); /* 5 seconds between resend attempts */
/// cc_mqttsn_gw_session_set_retry_count(handle, 4U); /* up to 4 attempts to resend the same message */
/// @endcode
/// If not configured, the default values of @b 10 seconds and @b 3 attempts apply.
///
/// It is also possible to retrieve the current configuration:
///
/// @b C++ interface:
/// @code
/// unsigned retryPeriod = session->getRetryPeriod();
/// unsigned retryCount = session->getRetryCount();
/// @endcode
///
/// @b C interface:
/// @code
/// unsigned retryPeriod = cc_mqttsn_gw_session_get_retry_period(gw);
/// unsigned retryCount = cc_mqttsn_gw_session_get_retry_count(gw);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_predefined_topics Predefined Topics
/// The messages in MQTT-SN protocol are published with numeric topic IDs
/// instead of strings (like in original MQTT). The protocol also allows 
/// bypassing the topic strings registration and using predefined IDs directly.
/// In this case the @b Session object must be configured with all known and
/// applicable topic string and topic numeric ID pairs. It will use this
/// information to convert between numeric topic ID topic topic string when forwarding
/// @b PUBLISH messages to both directions.
///
/// @b C++ interface:
/// @code
/// if (!session->addPredefinedTopic("some/predefined/topic", 123)) {
///     ... // report error
/// }
///
/// if (!session->addPredefinedTopic("other/predefined/topic", 1111)) {
///     ... // report error
/// }
/// @endcode
///
/// @b C interface:
/// @code
/// if (!cc_mqttsn_gw_session_add_predefined_topic(handle, "some/predefined/topic", 123)) {
///     ... /* report error */
/// }
///
/// if (!cc_mqttsn_gw_session_add_predefined_topic(handle, "other/predefined/topic", 1111)) {
///     ... /* report error */
/// }
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_topics_registration Allocating Topic IDs
/// When not using predefined topic IDs, there is a process of topic string
/// registration and allocating relevant numeric topic ID. This allocation is
/// performed by the @b Session object. By default the @b Session object will
/// pick the first number available. However, it may be wise to reserve some
/// range of topic IDs to be predefined ones, especially when there are
/// some @b client @b specific predefined topic IDs, which added later when
/// connected client ID is known (see @ref cc_mqttsn_gw_session_page_connected_client).
/// The library provides a way to limit range of topic IDs allocated during
/// the registration process.
///
/// @b C++ interface:
/// @code
/// if (!session->setTopicIdAllocationRange(0x1000, 0xffff)) {
///     ... // report error
/// }
/// @endcode
///
/// @b C interface:
/// @code
/// if (!cc_mqttsn_gw_session_set_topic_id_alloc_range(handle, 0x1000, 0xffff)) {
///     ... // report error
/// }
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_start Start Operation
/// After been properly configured the @b Session object needs to be
/// started.
///
/// @b C++ interface:
/// @code
/// if (!session->start()) {
///     ... // The session hasn't been properly configured, report error
/// }
/// @endcode
///
/// @b C interface:
/// @code
/// if (!cc_mqttsn_gw_session_start(handle)) {
///     ... /* The session hasn't been properly configured, report error */
/// }
/// @endcode
/// If not properly started, the @b Session object will ignore any input from
/// client and broker.
///
/// The operation of the @b Session object can also be stopped / paused for a while.
///
/// @b C++ interface:
/// @code
/// session->stop();
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_stop(handle);
/// @endcode
/// The operation of the stopped @b Session object may be restarted using the
/// same cc_mqttsn_gateway::Session::start() and cc_mqttsn_gw_session_start() functions.
///
/// @section cc_mqttsn_gw_session_page_broker_conn Connection to Broker
/// @b AFTER (important emphasis here) successfully starting operation of the
/// @b Session object (see @ref cc_mqttsn_gw_session_page_start) the driving
/// code must initiate TCP/IP connection to the MQTT broker. The driving code
/// must also constantly monitor the state of this connection and 
/// to the @b Session object any detected change. When started, the @b Session
/// object assumes broker is @b disconnected.
///
/// @b C++ interface:
/// @code
/// session->setBrokerConnected(true); // Reports broker being connected
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_set_broker_connected(handle, true); // Reports broker being connected
/// @endcode
/// When issuing broker re-connection request (see @ref cc_mqttsn_gw_session_page_broker_reconnect),
/// the @b Session object expects this call to happen twice: the first one for disconnection
/// report and second one for new connection report.
///
/// The driving code also responsible to detect unsolicited disconnects of
/// TCP/IP link to the broker and report it to the @b Session object using the
/// same function call.
///
/// It is also possible to retrieve the current status:
///
/// @b C++ interface:
/// @code
/// bool brokerConnected = session->getBrokerConnected();
/// @endcode
///
/// @b C interface:
/// @code
/// bool brokerConnected = cc_mqttsn_gw_session_get_broker_connected(handle);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_client_auth Client Authentication
/// The @b MQTT protocol supports client authentication, where the @b CONNECT
/// message may contain username and password. The @b MQTT-SN protocol,
/// on the other hand, lacks this feature. The @b Session object
/// provides an ability to set a callback function, which will be invoked
/// when MQTT-SN client's connection request is recognised. This callback
/// may provide authentication information for this client, which is
/// going to be filled in the forwarded @b CONNECT request.
///
/// @b C++ interface:
/// @code
/// session->setAuthInfoReqCb(
///     [](const std::string& clientId) -> cc_mqttsn_gateway::Session::AuthInfo
///     {
///         return std::make_pair(getUsernameFor(clientId), getPasswordFor(clientId));
///         
///     }); 
/// @endcode
///
/// @b C interface:
/// @code
/// void my_auth_callback(
///     void* userData, 
///     CC_MqttsnSessionHandle handle,
///     const char* clientId, 
///     const char** username, 
///     const unsigned char** password, 
///     unsigned* passwordLen)
/// {
///     *username = ...; /* assign pointer to username for provided client ID */
///     *password = ...; /* assign pointer to password for provided client ID */
///     *passwordLen = ...; /* specify length of the password */
/// }
///
/// cc_mqttsn_gw_session_set_auth_info_req_cb(handle, &my_auth_callback, someUserData);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_connected_client Connected Client Report
/// The @b Session object provides an ability to get notified when a MQTT-SN
/// client is successfully connected. The notification is performed using 
/// a callback. Inside this callback, the driving code may provide some
/// client specific configurations, such as new predefined topic IDs relevant
/// only to the connected client.
///
/// @b C++ interface:
/// @code
/// session->setClientConnectedReportCb(
///     [session](const std::string& clientId)
///     {
///         if (!session->addPredefinedTopic("client/specific/predefined/topic", 2222)) {
///             ... /* report error */
///         }
///     }); 
/// @endcode
///
/// @b C interface:
/// @code
/// void my_client_connect_report(void* userData, CC_MqttsnSessionHandle handle, const char* clientId)
/// {
///     if (!cc_mqttsn_gw_session_add_predefined_topic(handle, "client/specific/predefined/topic", 2222)) {
///         ... /* report error */
///     }
/// }
///
/// cc_mqttsn_gw_session_set_client_connect_report_cb(handle, &my_client_connect_report, someUserData);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_default_client_id Default Client ID
/// The @b Session object interface allows to specify the default ID
/// of the client, which is going to be used to connect to broker, if the
/// client doesn't provide non-empty ID string in its connection attempt.
/// This may be useful when client is connected over one-to-one I/O link such as
/// @b RS-232. In order to simplify the client implementation and reduce 
/// amount of data transferred on the link, the @b Session object may be
/// configured to substitute the empty client ID with other, non-empty
/// one, when forwarding the connection request to the broker.
///
/// The default client ID configuration may also be used with "publish
/// only" clients (see @ref cc_mqttsn_gw_session_page_publish_only below).
/// The configured client ID will be used when connecting to the broker on
/// behalf of the "publish only" client.
///
/// @b C++ interface:
/// @code
/// session->setDefaultClientId("some_default_id");
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_set_default_client_id(handle, "some_default_id");
/// @endcode
/// @b NOTE, that the @b Session object will make an attempt to substitute
/// reported client ID <b>if and only if</b> the client ID @b is empty and
/// configured default client ID is @b NOT.
///
/// It is also possible to retrieve the current configuration:
///
/// @b C++ interface:
/// @code
/// const std::string& defaultClientId = session->getDefaultClientId();
/// @endcode
///
/// @b C interface:
/// @code
/// const char* defaultClientId = cc_mqttsn_gw_session_get_default_client_id(handle);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_publish_only Publish Only Client
/// The MQTT-SN protocol allows "publish only" clients, which don't make
/// an attempt to connect to the gateway/broker, but allowed to 
/// publish messages with predefined topic IDs and QoS=-1. The gateway
/// must connect to the broker on behalf of such client. The connection
/// operation involves knowledge about client ID and "keep alive" period.
/// The client ID, that is going to be used, is configured as 
/// @ref cc_mqttsn_gw_session_page_default_client_id. The "keep alive" period
/// can be provided using separate function:
/// 
/// @b C++ interface:
/// @code
/// session->setPubOnlyKeepAlive(100); // 100 seconds
/// @endcode
///
/// @b C interface:
/// @code
/// cc_mqttsn_gw_session_set_pub_only_keep_alive(handle, 100); /* 100 seconds */
/// @endcode
/// If such configuration is not provided, the default value of @b 60 seconds
/// is assumed.
///
/// It is also possible to retrieve the current configuration:
///
/// @b C++ interface:
/// @code
/// std::uint16_t pubOnlyKeepAlive = session->getPubOnlyKeepAlive();
/// @endcode
///
/// @b C interface:
/// @code
/// unsigned pubOnlyKeepAlive = cc_mqttsn_gw_session_get_pub_only_keep_alive(handle);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_sleep Sleeping Client
/// The @b Session object supports client entering the @b SLEEP mode without any
/// extra configuration. It will send the @b PINGREQ messages on behalf of 
/// the client to keep the connection to the broker alive, and will accumulate
/// all the messages sent to the client until it wakes up. 
///
/// However, it may be a good idea to limit the number of messages, the 
/// @b Session object is allowed to accumulate, to avoid consumption of too much
/// memory.
///
/// @b C++ interface:
/// @code
/// session->setSleepingClientMsgLimit(1000); // no more that 1000 messages
/// @endcode
///
/// @b C++ interface:
/// @code
/// cc_mqttsn_gw_session_set_sleeping_client_msg_limit(handle, 1000); /* no more that 1000 messages */
/// @endcode
///
/// It is also possible to retrieve the current configuration:
///
/// @b C++ interface:
/// @code
/// std::size_t limit = session->getSleepingClientMsgLimit();
/// @endcode
///
/// @b C interface:
/// @code
/// unsigned long long limit = cc_mqttsn_gw_session_get_sleeping_client_msg_limit(handle);
/// @endcode
///
/// @section cc_mqttsn_gw_session_page_fwd_enc Forwarder Encapsulation Support
/// In case the gateway need to support forwarder encapsulation functionality there
/// is a need to set extra two callbacks.
///
/// @b C++ interface:
/// @code
/// session->setFwdEncSessionCreatedReportCb(
///     [](cc_mqttsn_gateway::Session* fwdSession) -> bool
///     {
///         ... // Perform the session configuration and set all the necessary callbacks
///         return true;
///     });
///
/// session->setFwdEncSessionDeletedReportCb(
///     [](cc_mqttsn_gateway::Session* fwdSession) -> bool
///     {
///         ... // Remove any reference to fwdSession in the data structures
///     });
/// @endcode
///
/// @b C interface:
/// @code
/// bool my_fwd_enc_session_created_report_cb(void* userData, CC_MqttsnSessionHandle handle)
/// {
///     ... // Perform the session configuration and set all the necessary callbacks
///     return true;
/// }
///
/// void my_fwd_enc_session_deleted_report_cb(void* userData, CC_MqttsnSessionHandle handle)
/// {
///     ... // Remove any reference to handle in the data structures
/// }
///
/// cc_mqttsn_gw_session_set_fwd_enc_session_created_cb(handle, &my_fwd_enc_session_created_report_cb, someDserData);
/// cc_mqttsn_gw_session_set_fwd_enc_session_deleted_cb(handle, &my_fwd_enc_session_deleted_report_cb, someDserData);
/// @endcode
///
/// When the new forward encapsulation session creation is reported, the application is
/// responsible to perform the necessary session configuration as well as set all
/// the necessary callbacks, except the @ref cc_mqttsn_gw_session_page_send_client
/// and the @ref cc_mqttsn_gw_session_page_term. These callbacks will be
/// set by the reporting session.
///
/// The reported forward encapsulation session object is owned by the reporting session
/// and its deletion will be reported using the deletion report callback.
///
/// The gateway application is responsible to manage the connection to the broker
/// as well as timers of the reported forward encapsulation session.
///
/// When the forward encapsulation session is reported, it's not
/// @ref cc_mqttsn_gw_session_page_start "started" yet. It will be when the
/// callback function returns. However, the
/// gateway application is expected to initiate asynchronous connection to the
/// broker and report the @ref cc_mqttsn_gw_session_page_broker_conn "connectivity"
/// later on. The @b important part is that broker connectivity must be reported
/// @b after the callback function returns.
///
/// @section cc_mqttsn_gw_session_page_error_report Errors Report
/// The gateway library can detect and report some unexpected behavior from the
/// application, client, and/or broker. The @b Session object reports such
/// errors via callback:
///
/// @b C++ interface
/// @code
/// session->setErrorReportCb(
///     [](const char* msg)
///     {
///         std::cerr << "ERROR: " << msg << std::endl;
///     });
/// @endcode
///
/// @b C interface
/// @code
/// void my_error_report(void* userData, CC_MqttsnSessionHandle session, const char* msg)
/// {
///     printf("ERROR: %s\n", msg);
/// }
///
/// cc_mqttsn_gw_session_set_error_report_cb(handle, &my_error_report, someUserData);
/// @endcode
///
