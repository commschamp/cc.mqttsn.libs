//
// Copyright 2016 - 2024 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "##NAME##client.h"
#include "ClientAllocator.h"
#include "ExtConfig.h"

#include "comms/Assert.h"
#include "comms/util/ScopeGuard.h"

#include <limits>

struct CC_MqttsnClient {};
struct CC_MqttsnSearch {};
struct CC_MqttsnConnect {};
struct CC_MqttsnDisconnect {};
struct CC_MqttsnSubscribe {};
struct CC_MqttsnUnsubscribe {};
struct CC_MqttsnPublish {};

namespace
{

cc_mqttsn_client::ClientAllocator& getClientAllocator()
{
    static cc_mqttsn_client::ClientAllocator Allocator;
    return Allocator;
}

inline cc_mqttsn_client::ClientImpl* clientFromHandle(CC_MqttsnClientHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::ClientImpl*>(handle);
}

inline CC_MqttsnClientHandle handleFromClient(cc_mqttsn_client::ClientImpl* client)
{
    return reinterpret_cast<CC_MqttsnClientHandle>(client);
}

#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
inline cc_mqttsn_client::op::SearchOp* searchOpFromHandle(CC_MqttsnSearchHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::SearchOp*>(handle);
}
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY

inline CC_MqttsnSearchHandle handleFromSearchOp(cc_mqttsn_client::op::SearchOp* op)
{
    return reinterpret_cast<CC_MqttsnSearchHandle>(op);
}

inline cc_mqttsn_client::op::ConnectOp* connectOpFromHandle(CC_MqttsnConnectHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::ConnectOp*>(handle);
}

inline CC_MqttsnConnectHandle handleFromConnectOp(cc_mqttsn_client::op::ConnectOp* op)
{
    return reinterpret_cast<CC_MqttsnConnectHandle>(op);
}

inline cc_mqttsn_client::op::DisconnectOp* disconnectOpFromHandle(CC_MqttsnDisconnectHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::DisconnectOp*>(handle);
}

inline CC_MqttsnDisconnectHandle handleFromDisconnectOp(cc_mqttsn_client::op::DisconnectOp* op)
{
    return reinterpret_cast<CC_MqttsnDisconnectHandle>(op);
}

inline cc_mqttsn_client::op::SubscribeOp* subscribeOpFromHandle(CC_MqttsnSubscribeHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::SubscribeOp*>(handle);
}

inline CC_MqttsnSubscribeHandle handleFromSubscribeOp(cc_mqttsn_client::op::SubscribeOp* op)
{
    return reinterpret_cast<CC_MqttsnSubscribeHandle>(op);
}

inline cc_mqttsn_client::op::UnsubscribeOp* unsubscribeOpFromHandle(CC_MqttsnUnsubscribeHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::UnsubscribeOp*>(handle);
}

inline CC_MqttsnUnsubscribeHandle handleFromUnsubscribeOp(cc_mqttsn_client::op::UnsubscribeOp* op)
{
    return reinterpret_cast<CC_MqttsnUnsubscribeHandle>(op);
}

inline cc_mqttsn_client::op::SendOp* sendOpFromHandle(CC_MqttsnPublishHandle handle)
{
    return reinterpret_cast<cc_mqttsn_client::op::SendOp*>(handle);
}

inline CC_MqttsnPublishHandle handleFromSendOp(cc_mqttsn_client::op::SendOp* op)
{
    return reinterpret_cast<CC_MqttsnPublishHandle>(op);
}

}  // namespace

CC_MqttsnClientHandle cc_mqttsn_##NAME##client_alloc()
{
    auto client = getClientAllocator().alloc();
    return handleFromClient(client.release());   
}

void cc_mqttsn_##NAME##client_free(CC_MqttsnClientHandle handle)
{
    getClientAllocator().free(clientFromHandle(handle));
}

void cc_mqttsn_##NAME##client_tick(CC_MqttsnClientHandle client, unsigned ms)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->tick(ms);
}

void cc_mqttsn_##NAME##client_process_data(CC_MqttsnClientHandle client, const unsigned char* buf, unsigned bufLen)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->processData(buf, bufLen);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_default_retry_period(CC_MqttsnClientHandle client, unsigned value)
{
    COMMS_ASSERT(client != nullptr);
    static const unsigned MaxValue = std::numeric_limits<decltype(cc_mqttsn_client::ConfigState::m_retryPeriod)>::max() / 1000U;
    if (MaxValue < value) {
        clientFromHandle(client)->errorLog("The retry period value is too high");
        return CC_MqttsnErrorCode_BadParam;
    }

    clientFromHandle(client)->configState().m_retryPeriod = value * 1000U;
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_get_default_retry_period(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->configState().m_retryPeriod;    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_default_retry_count(CC_MqttsnClientHandle client, unsigned value)
{
    COMMS_ASSERT(client != nullptr);
    if (value < 1U) {
        clientFromHandle(client)->errorLog("The retry count setting must be greater than zero.");
        return CC_MqttsnErrorCode_BadParam;
    }

    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->configState().m_retryCount = value;    
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_get_default_retry_count(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->configState().m_retryCount;      
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_default_broadcast_radius(CC_MqttsnClientHandle client, unsigned value)
{
    COMMS_ASSERT(client != nullptr);
    if (cc_mqttsn_client::ConfigState::MaxBroadcastRadius < value) {
        clientFromHandle(client)->errorLog("The broadcast radius is too high");
        return CC_MqttsnErrorCode_BadParam;
    }

    clientFromHandle(client)->configState().m_broadcastRadius = value;
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_get_default_broadcast_radius(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->configState().m_broadcastRadius;
}

unsigned cc_mqttsn_##NAME##client_get_available_gateways_count(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return static_cast<unsigned>(clientFromHandle(client)->clientState().m_gwInfos.size());
}

void cc_mqttsn_##NAME##client_init_gateway_info(CC_MqttsnGatewayInfo* info)
{
    COMMS_ASSERT(info != nullptr);
    *info = CC_MqttsnGatewayInfo();
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_get_available_gateway_info(CC_MqttsnClientHandle client, unsigned idx, CC_MqttsnGatewayInfo* info)
{
    COMMS_ASSERT(client != nullptr);
    auto clientPtr = clientFromHandle(client);
    if (info == nullptr) {
        clientPtr->errorLog("The provided gateway info pointer is invalid");
        return CC_MqttsnErrorCode_BadParam;
    }

    auto& gwInfos = clientPtr->clientState().m_gwInfos;
    if (gwInfos.size() <= idx) {
        clientPtr->errorLog("The gateway info index is too high");
        return CC_MqttsnErrorCode_BadParam;
    }

    auto& storedInfo = gwInfos[idx];
    *info = CC_MqttsnGatewayInfo();
    info->m_gwId = storedInfo.m_gwId;
    if (!storedInfo.m_addr.empty()) {
        info->m_addr = storedInfo.m_addr.data();
        info->m_addrLen = static_cast<decltype(info->m_addrLen)>(storedInfo.m_addr.size());
    }

    return CC_MqttsnErrorCode_Success;
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_available_gateway_info(CC_MqttsnClientHandle client, const CC_MqttsnGatewayInfo* info)
{
    COMMS_ASSERT(client != nullptr);
    auto* clientImpl = clientFromHandle(client);
    if (info == nullptr) {
        clientImpl->errorLog("The gateway info is not provided");
        return CC_MqttsnErrorCode_BadParam;
    }

    auto& gwInfos = clientImpl->clientState().m_gwInfos;
    auto iter = 
        std::find_if(
            gwInfos.begin(), gwInfos.end(),
            [info](auto& storedInfo)
            {
                return storedInfo.m_gwId == info->m_gwId;
            });

    auto updateFunc = 
        [clientImpl, info](cc_mqttsn_client::ClientState::GwInfo& storedInfo)
        {
            if (storedInfo.m_addr.max_size() < info->m_addrLen) {
                clientImpl->errorLog("The address cannot be stored");
                return CC_MqttsnErrorCode_OutOfMemory;
            }

            storedInfo.m_gwId = info->m_gwId;
            storedInfo.m_addr.assign(info->m_addr, info->m_addr + info->m_addrLen);
            return CC_MqttsnErrorCode_Success;
        };

    if (iter != gwInfos.end()) {
        return updateFunc(*iter);
    }

    if (gwInfos.max_size() <= gwInfos.size()) {
        clientImpl->errorLog("Cannot store any more gateways");
        return CC_MqttsnErrorCode_OutOfMemory;
    }

    gwInfos.resize(gwInfos.size() + 1U);
    auto result = updateFunc(gwInfos.back());
    if (result != CC_MqttsnErrorCode_Success) {
        gwInfos.pop_back();
    }

    return result;
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_discard_available_gateway_info(CC_MqttsnClientHandle client, unsigned char gwId)
{
    COMMS_ASSERT(client != nullptr);
    auto* clientImpl = clientFromHandle(client);
    auto& gwInfos = clientImpl->clientState().m_gwInfos;
    auto iter = 
        std::find_if(
            gwInfos.begin(), gwInfos.end(),
            [gwId](auto& storedInfo)
            {
                return storedInfo.m_gwId = gwId;
            });

    if (iter == gwInfos.end()) {
        clientImpl->errorLog("Uknown gateway ID");
        return CC_MqttsnErrorCode_BadParam;
    }            

    gwInfos.erase(iter);
    return CC_MqttsnErrorCode_Success;
}

void cc_mqttsn_##NAME##client_discard_all_gateway_infos(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->clientState().m_gwInfos.clear();    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_default_gw_adv_duration(CC_MqttsnClientHandle client, unsigned ms)
{
    COMMS_ASSERT(client != nullptr);
    auto* clientImpl = clientFromHandle(client);
    if (ms == 0U) {
        clientImpl->errorLog("The default gatway advertise duration must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }

    clientImpl->configState().m_gwAdvTimeoutMs = ms;    
    return CC_MqttsnErrorCode_Success;    
}

unsigned cc_mqttsn_##NAME##client_get_default_gw_adv_duration(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->configState().m_gwAdvTimeoutMs;
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_allowed_adv_losses(CC_MqttsnClientHandle client, unsigned count)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->configState().m_allowedAdvLosses = count;
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_get_allowed_adv_losses(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->configState().m_allowedAdvLosses;
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_verify_outgoing_topic_enabled(CC_MqttsnClientHandle client, bool enabled)
{
    if constexpr (cc_mqttsn_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(client != nullptr);
        clientFromHandle(client)->configState().m_verifyOutgoingTopic = enabled;
        return CC_MqttsnErrorCode_Success;
    }
    else {
        return CC_MqttsnErrorCode_NotSupported;
    }
}

bool cc_mqttsn_##NAME##client_get_verify_outgoing_topic_enabled(CC_MqttsnClientHandle client)
{
    if constexpr (cc_mqttsn_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(client != nullptr);
        return clientFromHandle(client)->configState().m_verifyOutgoingTopic;
    }
    else {
        return false;
    }
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_verify_incoming_topic_enabled(CC_MqttsnClientHandle client, bool enabled)
{
    if constexpr (cc_mqttsn_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(client != nullptr);
        clientFromHandle(client)->configState().m_verifyIncomingTopic = enabled;
        return CC_MqttsnErrorCode_Success;
    }
    else {
        return CC_MqttsnErrorCode_NotSupported;
    }
}

bool cc_mqttsn_##NAME##client_get_verify_incoming_topic_enabled(CC_MqttsnClientHandle client)
{
    if constexpr (cc_mqttsn_client::Config::HasTopicFormatVerification) {
        COMMS_ASSERT(client != nullptr);
        return clientFromHandle(client)->configState().m_verifyIncomingTopic;
    }
    else {
        return false;
    }
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_set_verify_incoming_msg_subscribed(CC_MqttsnClientHandle client, bool enabled)
{
    if constexpr (cc_mqttsn_client::Config::HasSubTopicVerification) {
        COMMS_ASSERT(client != nullptr);
        clientFromHandle(client)->configState().m_verifySubFilter = enabled;
        return CC_MqttsnErrorCode_Success;
    }
    else {
        return CC_MqttsnErrorCode_NotSupported;
    }
}

bool cc_mqttsn_##NAME##client_get_verify_incoming_msg_subscribed(CC_MqttsnClientHandle client)
{
    if constexpr (cc_mqttsn_client::Config::HasSubTopicVerification) {
        COMMS_ASSERT(client != nullptr);
        return clientFromHandle(client)->configState().m_verifySubFilter;
    }
    else {
        return false;
    }
}

CC_MqttsnSearchHandle cc_mqttsn_##NAME##client_search_prepare(
    [[maybe_unused]] CC_MqttsnClientHandle client, 
    [[maybe_unused]] CC_MqttsnErrorCode* ec)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY       
    COMMS_ASSERT(client != nullptr);
    return handleFromSearchOp(clientFromHandle(client)->searchPrepare(ec));
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY   
    clientFromHandle(client)->errorLog("Gateway discovery support for excluded from compilation");
    if (ec != nullptr) {
        *ec = CC_MqttsnErrorCode_NotSupported;
    }
    return nullptr;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY   
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search_set_retry_period(
    [[maybe_unused]] CC_MqttsnSearchHandle handle, 
    [[maybe_unused]] unsigned ms)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    

    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        searchOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    searchOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;

#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY

    return CC_MqttsnErrorCode_NotSupported;

#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

unsigned cc_mqttsn_##NAME##client_search_get_retry_period([[maybe_unused]] CC_MqttsnSearchHandle handle)
{
    
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY        
    COMMS_ASSERT(handle != nullptr);
    return searchOpFromHandle(handle)->getRetryPeriod();    
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    
    COMMS_ASSERT(false); // Should not be called
    return 0U;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search_set_retry_count(
    [[maybe_unused]] CC_MqttsnSearchHandle handle, 
    [[maybe_unused]] unsigned count)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY        
    COMMS_ASSERT(handle != nullptr);
    searchOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;    

#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    

    return CC_MqttsnErrorCode_NotSupported;

#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    
}

unsigned cc_mqttsn_##NAME##client_search_get_retry_count([[maybe_unused]] CC_MqttsnSearchHandle handle)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    
    COMMS_ASSERT(handle != nullptr);
    return searchOpFromHandle(handle)->getRetryCount();       
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    COMMS_ASSERT(false); // Should not be called
    return 0U;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search_set_broadcast_radius(
    [[maybe_unused]] CC_MqttsnSearchHandle handle, 
    [[maybe_unused]] unsigned broadcastRadius)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY

    COMMS_ASSERT(handle != nullptr);
    if (broadcastRadius == 0U) {
        searchOpFromHandle(handle)->client().errorLog("The broadcast radius must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }    
    
    searchOpFromHandle(handle)->setBroadcastRadius(broadcastRadius);     
    return CC_MqttsnErrorCode_Success;  

#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY

    return CC_MqttsnErrorCode_NotSupported;

#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

unsigned cc_mqttsn_##NAME##client_search_get_broadcast_radius([[maybe_unused]] CC_MqttsnSearchHandle handle)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    COMMS_ASSERT(handle != nullptr);
    return searchOpFromHandle(handle)->getBroadcastRadius();       
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    COMMS_ASSERT(false); // Should not be called
    return 0U;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search_send(
    [[maybe_unused]] CC_MqttsnSearchHandle handle, 
    [[maybe_unused]] CC_MqttsnSearchCompleteCb cb, 
    [[maybe_unused]] void* cbData)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    COMMS_ASSERT(handle != nullptr);
    return searchOpFromHandle(handle)->send(cb, cbData);
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    return CC_MqttsnErrorCode_NotSupported;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search(
    CC_MqttsnClientHandle handle,
    CC_MqttsnSearchCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto search = cc_mqttsn_##NAME##client_search_prepare(handle, &ec);
    if (search == nullptr) {
        return ec;
    }

    return cc_mqttsn_##NAME##client_search_send(search, cb, cbData);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_search_cancel([[maybe_unused]] CC_MqttsnSearchHandle handle)
{
#if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY    
    COMMS_ASSERT(handle != nullptr);
    return searchOpFromHandle(handle)->cancel();    
#else // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
    return CC_MqttsnErrorCode_NotSupported;
#endif // #if CC_MQTTSN_CLIENT_HAS_GATEWAY_DISCOVERY
}

CC_MqttsnConnectHandle cc_mqttsn_##NAME##client_connect_prepare(CC_MqttsnClientHandle client, CC_MqttsnErrorCode* ec)
{
    COMMS_ASSERT(client != nullptr);
    return handleFromConnectOp(clientFromHandle(client)->connectPrepare(ec));
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_set_retry_period(CC_MqttsnConnectHandle handle, unsigned ms)
{
    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        connectOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    connectOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_connect_get_retry_period(CC_MqttsnConnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->getRetryPeriod();    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_set_retry_count(CC_MqttsnConnectHandle handle, unsigned count)
{
    COMMS_ASSERT(handle != nullptr);
    connectOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;  
}

unsigned cc_mqttsn_##NAME##client_connect_get_retry_count(CC_MqttsnConnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->getRetryCount();     
}

void cc_mqttsn_##NAME##client_connect_init_config(CC_MqttsnConnectConfig* config)
{
    COMMS_ASSERT(config != nullptr);
    *config = CC_MqttsnConnectConfig();
    config->m_duration = cc_mqttsn_client::ClientState::DefaultKeepAlive;
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_config(CC_MqttsnConnectHandle handle, const CC_MqttsnConnectConfig* config)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->config(config);
}

void cc_mqttsn_##NAME##client_connect_init_config_will(CC_MqttsnWillConfig* config)
{
    COMMS_ASSERT(config != nullptr);
    *config = CC_MqttsnWillConfig();    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_config_will(CC_MqttsnConnectHandle handle, const CC_MqttsnWillConfig* config)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->willConfig(config);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_send(CC_MqttsnConnectHandle handle, CC_MqttsnConnectCompleteCb cb, void* cbData)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->send(cb, cbData);
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect_cancel(CC_MqttsnConnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return connectOpFromHandle(handle)->cancel();    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_connect(
    CC_MqttsnClientHandle client,
    const CC_MqttsnConnectConfig* config,
    const CC_MqttsnWillConfig* willConfig,
    CC_MqttsnConnectCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto connect = cc_mqttsn_##NAME##client_connect_prepare(client, &ec);
    if (connect == nullptr) {
        return ec;
    }

    auto cancelOnExitGuard = 
        comms::util::makeScopeGuard(
            [connect]()
            {
                [[maybe_unused]] auto ecTmp = cc_mqttsn_##NAME##client_connect_cancel(connect);
            });    

    if (config != nullptr) {
        ec = cc_mqttsn_##NAME##client_connect_config(connect, config);
        if (ec != CC_MqttsnErrorCode_Success) {
            return ec;
        }
    }

    if (willConfig != nullptr) {
        ec = cc_mqttsn_##NAME##client_connect_config_will(connect, willConfig);
        if (ec != CC_MqttsnErrorCode_Success) {
            return ec;
        }        
    }

    cancelOnExitGuard.release();
    return cc_mqttsn_##NAME##client_connect_send(connect, cb, cbData);    
}

bool cc_mqttsn_##NAME##client_is_connected(CC_MqttsnClientHandle client)
{
    COMMS_ASSERT(client != nullptr);
    return clientFromHandle(client)->sessionState().m_connected;
}

CC_MqttsnDisconnectHandle cc_mqttsn_##NAME##client_disconnect_prepare(CC_MqttsnClientHandle client, CC_MqttsnErrorCode* ec)
{
    COMMS_ASSERT(client != nullptr);
    return handleFromDisconnectOp(clientFromHandle(client)->disconnectPrepare(ec));
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_disconnect_set_retry_period(CC_MqttsnDisconnectHandle handle, unsigned ms)
{
    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        disconnectOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    disconnectOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;
}

unsigned cc_mqttsn_##NAME##client_disconnect_get_retry_period(CC_MqttsnDisconnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return disconnectOpFromHandle(handle)->getRetryPeriod();    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_disconnect_set_retry_count(CC_MqttsnDisconnectHandle handle, unsigned count)
{
    COMMS_ASSERT(handle != nullptr);
    disconnectOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;  
}

unsigned cc_mqttsn_##NAME##client_disconnect_get_retry_count(CC_MqttsnDisconnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return disconnectOpFromHandle(handle)->getRetryCount();     
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_disconnect_send(CC_MqttsnDisconnectHandle handle, CC_MqttsnDisconnectCompleteCb cb, void* cbData)
{
    COMMS_ASSERT(handle != nullptr);
    return disconnectOpFromHandle(handle)->send(cb, cbData);
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_disconnect_cancel(CC_MqttsnDisconnectHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return disconnectOpFromHandle(handle)->cancel();  
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_disconnect(
    CC_MqttsnClientHandle client,
    CC_MqttsnDisconnectCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto disconnect = cc_mqttsn_##NAME##client_disconnect_prepare(client, &ec);
    if (disconnect == nullptr) {
        return ec;
    }

    return cc_mqttsn_##NAME##client_disconnect_send(disconnect, cb, cbData);        
}

CC_MqttsnSubscribeHandle cc_mqttsn_##NAME##client_subscribe_prepare(CC_MqttsnClientHandle client, CC_MqttsnErrorCode* ec)
{
    COMMS_ASSERT(client != nullptr);
    return handleFromSubscribeOp(clientFromHandle(client)->subscribePrepare(ec));    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe_set_retry_period(CC_MqttsnSubscribeHandle handle, unsigned ms)
{
    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        subscribeOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    subscribeOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;    
}

unsigned cc_mqttsn_##NAME##client_subscribe_get_retry_period(CC_MqttsnSubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return subscribeOpFromHandle(handle)->getRetryPeriod();      
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe_set_retry_count(CC_MqttsnSubscribeHandle handle, unsigned count)
{
    COMMS_ASSERT(handle != nullptr);
    subscribeOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;  
}

unsigned cc_mqttsn_##NAME##client_subscribe_get_retry_count(CC_MqttsnSubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return subscribeOpFromHandle(handle)->getRetryCount();         
}

void cc_mqttsn_##NAME##client_subscribe_init_config(CC_MqttsnSubscribeConfig* config)
{
    COMMS_ASSERT(config != nullptr);
    *config = CC_MqttsnSubscribeConfig();
    config->m_qos = static_cast<decltype(config->m_qos)>(cc_mqttsn_client::Config::MaxQos);
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe_config(CC_MqttsnSubscribeHandle handle, const CC_MqttsnSubscribeConfig* config)
{
    COMMS_ASSERT(handle != nullptr);
    return subscribeOpFromHandle(handle)->config(config);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe_send(CC_MqttsnSubscribeHandle handle, CC_MqttsnSubscribeCompleteCb cb, void* cbData)
{
    COMMS_ASSERT(handle != nullptr);
    return subscribeOpFromHandle(handle)->send(cb, cbData);       
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe_cancel(CC_MqttsnSubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return subscribeOpFromHandle(handle)->cancel();  
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_subscribe(
    CC_MqttsnClientHandle client,
    const CC_MqttsnSubscribeConfig* config,
    CC_MqttsnSubscribeCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto subscribe = cc_mqttsn_##NAME##client_subscribe_prepare(client, &ec);
    if (subscribe == nullptr) {
        return ec;
    }

    auto cancelOnExitGuard = 
        comms::util::makeScopeGuard(
            [subscribe]()
            {
                [[maybe_unused]] auto ecTmp = cc_mqttsn_##NAME##client_subscribe_cancel(subscribe);
            });    

    if (config != nullptr) {
        ec = cc_mqttsn_##NAME##client_subscribe_config(subscribe, config);
        if (ec != CC_MqttsnErrorCode_Success) {
            return ec;
        }
    }

    cancelOnExitGuard.release();
    return cc_mqttsn_##NAME##client_subscribe_send(subscribe, cb, cbData);     
}

CC_MqttsnUnsubscribeHandle cc_mqttsn_##NAME##client_unsubscribe_prepare(CC_MqttsnClientHandle client, CC_MqttsnErrorCode* ec)
{
    COMMS_ASSERT(client != nullptr);
    return handleFromUnsubscribeOp(clientFromHandle(client)->unsubscribePrepare(ec));    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe_set_retry_period(CC_MqttsnUnsubscribeHandle handle, unsigned ms)
{
    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        unsubscribeOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    unsubscribeOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;    
}

unsigned cc_mqttsn_##NAME##client_unsubscribe_get_retry_period(CC_MqttsnUnsubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return unsubscribeOpFromHandle(handle)->getRetryPeriod();      
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe_set_retry_count(CC_MqttsnUnsubscribeHandle handle, unsigned count)
{
    COMMS_ASSERT(handle != nullptr);
    unsubscribeOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;  
}

unsigned cc_mqttsn_##NAME##client_unsubscribe_get_retry_count(CC_MqttsnUnsubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return unsubscribeOpFromHandle(handle)->getRetryCount();         
}

void cc_mqttsn_##NAME##client_unsubscribe_init_config(CC_MqttsnUnsubscribeConfig* config)
{
    COMMS_ASSERT(config != nullptr);
    *config = CC_MqttsnUnsubscribeConfig();
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe_config(CC_MqttsnUnsubscribeHandle handle, const CC_MqttsnUnsubscribeConfig* config)
{
    COMMS_ASSERT(handle != nullptr);
    return unsubscribeOpFromHandle(handle)->config(config);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe_send(CC_MqttsnUnsubscribeHandle handle, CC_MqttsnUnsubscribeCompleteCb cb, void* cbData)
{
    COMMS_ASSERT(handle != nullptr);
    return unsubscribeOpFromHandle(handle)->send(cb, cbData);       
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe_cancel(CC_MqttsnUnsubscribeHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return unsubscribeOpFromHandle(handle)->cancel();  
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_unsubscribe(
    CC_MqttsnClientHandle client,
    const CC_MqttsnUnsubscribeConfig* config,
    CC_MqttsnUnsubscribeCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto unsubscribe = cc_mqttsn_##NAME##client_unsubscribe_prepare(client, &ec);
    if (unsubscribe == nullptr) {
        return ec;
    }

    auto cancelOnExitGuard = 
        comms::util::makeScopeGuard(
            [unsubscribe]()
            {
                [[maybe_unused]] auto ecTmp = cc_mqttsn_##NAME##client_unsubscribe_cancel(unsubscribe);
            });    

    if (config != nullptr) {
        ec = cc_mqttsn_##NAME##client_unsubscribe_config(unsubscribe, config);
        if (ec != CC_MqttsnErrorCode_Success) {
            return ec;
        }
    }

    cancelOnExitGuard.release();
    return cc_mqttsn_##NAME##client_unsubscribe_send(unsubscribe, cb, cbData);     
}

CC_MqttsnPublishHandle cc_mqttsn_##NAME##client_publish_prepare(CC_MqttsnClientHandle client, CC_MqttsnErrorCode* ec)
{
    COMMS_ASSERT(client != nullptr);
    return handleFromSendOp(clientFromHandle(client)->publishPrepare(ec));    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish_set_retry_period(CC_MqttsnPublishHandle handle, unsigned ms)
{
    COMMS_ASSERT(handle != nullptr);
    if (ms == 0U) {
        sendOpFromHandle(handle)->client().errorLog("The retry period must be greater than 0");
        return CC_MqttsnErrorCode_BadParam;
    }
    
    COMMS_ASSERT(handle != nullptr);
    sendOpFromHandle(handle)->setRetryPeriod(ms);     
    return CC_MqttsnErrorCode_Success;    
}

unsigned cc_mqttsn_##NAME##client_publish_get_retry_period(CC_MqttsnPublishHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return sendOpFromHandle(handle)->getRetryPeriod();      
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish_set_retry_count(CC_MqttsnPublishHandle handle, unsigned count)
{
    COMMS_ASSERT(handle != nullptr);
    sendOpFromHandle(handle)->setRetryCount(count);     
    return CC_MqttsnErrorCode_Success;  
}

unsigned cc_mqttsn_##NAME##client_publish_get_retry_count(CC_MqttsnPublishHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return sendOpFromHandle(handle)->getRetryCount();         
}

void cc_mqttsn_##NAME##client_publish_init_config(CC_MqttsnPublishConfig* config)
{
    COMMS_ASSERT(config != nullptr);
    *config = CC_MqttsnPublishConfig();
    config->m_qos = static_cast<decltype(config->m_qos)>(cc_mqttsn_client::Config::MaxQos);
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish_config(CC_MqttsnPublishHandle handle, const CC_MqttsnPublishConfig* config)
{
    COMMS_ASSERT(handle != nullptr);
    return sendOpFromHandle(handle)->config(config);    
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish_send(CC_MqttsnPublishHandle handle, CC_MqttsnPublishCompleteCb cb, void* cbData)
{
    COMMS_ASSERT(handle != nullptr);
    return sendOpFromHandle(handle)->send(cb, cbData);       
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish_cancel(CC_MqttsnPublishHandle handle)
{
    COMMS_ASSERT(handle != nullptr);
    return sendOpFromHandle(handle)->cancel();  
}

CC_MqttsnErrorCode cc_mqttsn_##NAME##client_publish(
    CC_MqttsnClientHandle client,
    const CC_MqttsnPublishConfig* config,
    CC_MqttsnPublishCompleteCb cb, 
    void* cbData)
{
    auto ec = CC_MqttsnErrorCode_Success;
    auto publish = cc_mqttsn_##NAME##client_publish_prepare(client, &ec);
    if (publish == nullptr) {
        return ec;
    }

    auto cancelOnExitGuard = 
        comms::util::makeScopeGuard(
            [publish]()
            {
                [[maybe_unused]] auto ecTmp = cc_mqttsn_##NAME##client_publish_cancel(publish);
            });    

    if (config != nullptr) {
        ec = cc_mqttsn_##NAME##client_publish_config(publish, config);
        if (ec != CC_MqttsnErrorCode_Success) {
            return ec;
        }
    }

    cancelOnExitGuard.release();
    return cc_mqttsn_##NAME##client_publish_send(publish, cb, cbData);     
}

// --------------------- Callbacks ---------------------

void cc_mqttsn_##NAME##client_set_next_tick_program_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnNextTickProgramCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setNextTickProgramCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_cancel_next_tick_wait_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnCancelNextTickWaitCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setCancelNextTickWaitCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_send_output_data_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnSendOutputDataCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setSendOutputDataCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_gw_status_report_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnGwStatusReportCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setGatewayStatusReportCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_gw_disconnect_report_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnGwDisconnectedReportCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setGatewayDisconnectedReportCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_message_report_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnMessageReportCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setMessageReceivedCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_error_log_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnErrorLogCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setErrorLogCallback(cb, data);
}

void cc_mqttsn_##NAME##client_set_gwinfo_delay_request_callback(
    CC_MqttsnClientHandle client,
    CC_MqttsnGwinfoDelayRequestCb cb,
    void* data)
{
    COMMS_ASSERT(client != nullptr);
    clientFromHandle(client)->setGwinfoDelayReqCb(cb, data);
}
