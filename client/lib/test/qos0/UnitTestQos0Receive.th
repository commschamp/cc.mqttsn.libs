#include "UnitTestQos0Base.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestQos0Receive : public CxxTest::TestSuite, public UnitTestQos0Base
{
public:
    void test1();
    void test2();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }

    using TopicIdType = UnitTestPublishMsg::Field_flags::Field_topicIdType::ValueType;
    using RetCode = UnitTestPubackMsg::Field_returnCode::ValueType;
};

void UnitTestQos0Receive::test1()
{
    // Rejecting Qos2 messages
    auto clientPtr = unitTestAllocClient();
    auto* client = clientPtr.get();

    TS_ASSERT_DIFFERS(client, nullptr);
    unitTestDoConnectBasic(client, __FUNCTION__); 

    TS_ASSERT(unitTestHasTickReq());
    unitTestTick(client, 1000);    

    const CC_MqttsnTopicId TopicId = 123;
    const UnitTestData Data = { 0x1, 0x2, 0x3, 0x4, 0x5};
    const std::uint16_t MsgId = 1U;

    unitTestDoSubscribeTopicId(client, TopicId, CC_MqttsnQoS_AtMostOnceDelivery);

    TS_ASSERT(unitTestHasTickReq());
    unitTestTick(client, 1000);   

    {
        UnitTestPublishMsg publishMsg;
        publishMsg.field_flags().field_qos().setValue(CC_MqttsnQoS_ExactlyOnceDelivery);
        publishMsg.field_flags().field_topicIdType().value() = TopicIdType::PredefinedTopicId;
        publishMsg.field_topicId().setValue(TopicId);
        publishMsg.field_msgId().setValue(MsgId);
        publishMsg.field_data().value() = Data;

        unitTestClientInputMessage(client, publishMsg);
    } 

    {
        TS_ASSERT(unitTestHasOutputData());
        auto sentMsg = unitTestPopOutputMessage();
        auto* pubackMsg = dynamic_cast<UnitTestPubackMsg*>(sentMsg.get());
        TS_ASSERT_DIFFERS(pubackMsg, nullptr);
        TS_ASSERT_EQUALS(pubackMsg->field_topicId().value(), TopicId);
        TS_ASSERT_EQUALS(pubackMsg->field_msgId().value(), MsgId);
        TS_ASSERT_EQUALS(pubackMsg->field_returnCode().value(), RetCode::NotSupported);
    }   

    TS_ASSERT(!unitTestHasReceivedMessage());    
}

void UnitTestQos0Receive::test2()
{
    // Rejecting Qos1 messages
    auto clientPtr = unitTestAllocClient();
    auto* client = clientPtr.get();

    TS_ASSERT_DIFFERS(client, nullptr);
    unitTestDoConnectBasic(client, __FUNCTION__); 

    TS_ASSERT(unitTestHasTickReq());
    unitTestTick(client, 1000);    

    const CC_MqttsnTopicId TopicId = 123;
    const UnitTestData Data = { 0x1, 0x2, 0x3, 0x4, 0x5};
    const std::uint16_t MsgId = 1U;

    unitTestDoSubscribeTopicId(client, TopicId, CC_MqttsnQoS_AtMostOnceDelivery);

    TS_ASSERT(unitTestHasTickReq());
    unitTestTick(client, 1000);   

    {
        UnitTestPublishMsg publishMsg;
        publishMsg.field_flags().field_qos().setValue(CC_MqttsnQoS_AtLeastOnceDelivery);
        publishMsg.field_flags().field_topicIdType().value() = TopicIdType::PredefinedTopicId;
        publishMsg.field_topicId().setValue(TopicId);
        publishMsg.field_msgId().setValue(MsgId);
        publishMsg.field_data().value() = Data;

        unitTestClientInputMessage(client, publishMsg);
    } 

    {
        TS_ASSERT(unitTestHasOutputData());
        auto sentMsg = unitTestPopOutputMessage();
        auto* pubackMsg = dynamic_cast<UnitTestPubackMsg*>(sentMsg.get());
        TS_ASSERT_DIFFERS(pubackMsg, nullptr);
        TS_ASSERT_EQUALS(pubackMsg->field_topicId().value(), TopicId);
        TS_ASSERT_EQUALS(pubackMsg->field_msgId().value(), MsgId);
        TS_ASSERT_EQUALS(pubackMsg->field_returnCode().value(), RetCode::NotSupported);
    }   

    TS_ASSERT(!unitTestHasReceivedMessage());    
}
