//
// Copyright 2023 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "AflFuzz.h"

#include "Generator.h"

#include "##NAME##client.h"

#include "cc_mqttsn/Message.h"
#include "cc_mqttsn/frame/Frame.h"

#ifdef WIN32
#include <io.h>
#else // #ifdef WIN32
#include <unistd.h>
#endif // #ifdef WIN32

#include <algorithm>
#include <cassert>
#include <cstdlib>

namespace cc_mqttsn_client_afl_fuzz
{

namespace 
{

const std::size_t BufSize = 1024000;

} // namespace 
    

class AflFuzzImpl
{
public:
    explicit AflFuzzImpl(const ProgramOptions& opts, Logger& logger) : 
        m_opts(opts),
        m_logger(logger),
        m_client(cc_mqttsn_##NAME##client_alloc()),
        m_verbose(opts.verbose())
    {
    }

    bool init()
    {
        if (!createGeneratorIfNeeded()) {
            return false;
        }

        auto subTopics = m_opts.subTopics();
        std::transform(
            subTopics.begin(), subTopics.end(), std::back_inserter(m_state.m_subs),
            [](auto& topic)
            {
                SubscribeInfo info;
                try {
                    info.m_topicId = static_cast<decltype(info.m_topicId)>(std::stoul(topic));
                }
                catch (...) {
                    info.m_topic = topic;
                }
                return info;
            });

        cc_mqttsn_##NAME##client_set_next_tick_program_callback(m_client.get(), &AflFuzzImpl::nextTickProgramCb, this);
        cc_mqttsn_##NAME##client_set_cancel_next_tick_wait_callback(m_client.get(), &AflFuzzImpl::cancelNextTickWaitCb, this);
        cc_mqttsn_##NAME##client_set_send_output_data_callback(m_client.get(), &AflFuzzImpl::sendOutputDataCb, this);
        cc_mqttsn_##NAME##client_set_gw_disconnect_report_callback(m_client.get(), &AflFuzzImpl::gatewayDisconnectReportCb, this);
        cc_mqttsn_##NAME##client_set_gw_status_report_callback(m_client.get(), &AflFuzzImpl::gwStatusReportCb, this);
        cc_mqttsn_##NAME##client_set_message_report_callback(m_client.get(), &AflFuzzImpl::messageReceivedReportCb, this);
        cc_mqttsn_##NAME##client_set_error_log_callback(m_client.get(), &AflFuzzImpl::errorLogCb, this);
        return true;
    }

    void run()
    {
#ifndef WIN32        
        sync();
#endif        

        std::uint8_t buf[BufSize] = {0};
        while (true) {
            m_logger.flush();

            if (m_state.m_reinitRequired) {
                doReinit();
            }

            do {
                if (m_state.m_searchRequired) {
                    doSearch();
                    break;
                }

                if (m_state.m_connectRequired) {
                    doConnect();
                    break;
                }

                if (cc_mqttsn_##NAME##client_get_connection_status(m_client.get()) == CC_MqttsnConnectionStatus_Disconnected) {
                    infoLog() << "Not connected yet..." << std::endl;
                    assert(!m_state.m_connected);
                    break;
                }

                doSubscribeIfNeeded();

                if (!isSubscribeComplete()) {
                    break;
                }

                if (m_state.m_publishCount < m_opts.minPubCount()) {
                    // Not all messages have been exchanged
                    break;
                }
                
                doWillUpdateIfNeeded();

                if (!m_state.m_willUpdateComplete) {
                    break;
                }

                doSleepIfNeeded();

                if (!m_state.m_sleepComplete) {
                    break;
                }

                doCheckMessagesIfNeeded();

                if (m_state.m_sleepCheckCount < m_opts.sleepCheckCount()) {
                    // checks during sleep are note complete
                    break;
                }     

                if ((!m_state.m_connected) && (!m_state.m_connectRequired)) {
                    m_state.m_connectRequired = true;
                    break; // will try reconnecting
                }

                doUnsubscribeIfNeeded();

                if (!isUnsubscribeComplete()) {
                    break;
                }

                doDisconnectIfNeeded();

            } while (false);      

            int len = 0;
            bool noMoreRead = true;
            if (!m_generator) {
#ifdef WIN32
                len = _read(0, buf, BufSize);
#else // #ifdef WIN32
                len = static_cast<decltype(len)>(read(0, buf, BufSize));
#endif // #ifdef WIN32                
                noMoreRead = (len <= 0);
                len = std::max(len, static_cast<decltype(len)>(0));
                infoLog() << "Read " << len << " bytes\n";

                if (m_verbose) {
                    auto& out = debugLog();
                    out << "Read bytes: " << std::hex;
                    std::copy_n(buf, len, std::ostream_iterator<unsigned>(out, " "));
                    out << std::dec << std::endl;
                }
            }

            auto dataPtr = &buf[0];
            auto dataLen = static_cast<std::size_t>(len);
            bool hasPrevData = false;
            if (!m_inData.empty()) {
                m_inData.reserve(m_inData.size() + dataLen);
                m_inData.insert(m_inData.end(), dataPtr, dataPtr + dataLen);
                static const auto MaxLen = std::numeric_limits<unsigned>::max();

                if (MaxLen < m_inData.size()) {
                    m_inData.erase(m_inData.begin(), m_inData.begin() + (m_inData.size() - MaxLen));
                }

                dataPtr = m_inData.data();
                dataLen = m_inData.size();
                hasPrevData = true;
            }

            using Interface = cc_mqttsn::Message<>;
            using LengthField = cc_mqttsn::frame::Frame<Interface>::Layer_length::Field;

            auto iter = dataPtr;
            auto processLen = dataLen;
            LengthField lengthField;
            auto es = lengthField.read(iter, dataLen);
            if (es == comms::ErrorStatus::NotEnoughData) {
                if (!noMoreRead) {
                    continue;
                }

                infoLog() << "Failed to read length, insufficient data in buffer (" << dataLen << "), stopping execution loop" << std::endl;
                break;                
            }

            if (es == comms::ErrorStatus::Success) {
                auto msgLen = lengthField.getValue();
                processLen = lengthField.length() + msgLen;
            }

            if (dataLen < processLen) {
                if (!noMoreRead) {
                    continue;
                }

                infoLog() << "Insufficient data in buffer (" << dataLen << " requiring " << processLen << "), stopping execution loop" << std::endl;
                break;  
            }

            infoLog() << "Processing " << processLen << " out of " << dataLen << " bytes...\n";
            CC_MqttsnDataOrigin origin = CC_MqttsnDataOrigin_ConnectedGw;
            if (m_state.m_searchRequired) {
                origin = CC_MqttsnDataOrigin_Any;
            }

            if (m_verbose) {
                auto& out = debugLog();
                out << "Processing bytes: " << std::hex;
                std::copy_n(dataPtr, processLen, std::ostream_iterator<unsigned>(out, " "));
                out << std::dec << std::endl;
            }
            
            cc_mqttsn_##NAME##client_process_data(m_client.get(), dataPtr, static_cast<unsigned>(processLen), origin);

            if ((dataLen <= processLen) && (!hasPrevData)) {
                infoLog() << "Consumed all available bytes\n";
                m_inData.clear();
                continue;
            }

            if (!hasPrevData) {
                m_inData.assign(dataPtr + processLen, dataPtr + dataLen);
                infoLog() << "Keeping " << m_inData.size() << " bytes for the next iteration\n";
                continue;
            }

            m_inData.erase(m_inData.begin(), m_inData.begin() + processLen);
            infoLog() << "Keeping " << m_inData.size() << " bytes for the next iteration\n";        
        }

        m_client.reset();

        infoLog() << "------------------------------------------------" << std::endl;
    }

private:
    struct ClientDeleter
    {
        void operator()(CC_MqttsnClient* ptr)
        {
            cc_mqttsn_##NAME##client_free(ptr);
        }
    }; 

    using ClientPtr = std::unique_ptr<CC_MqttsnClient, ClientDeleter>;

    struct SubscribeInfo
    {
        std::string m_topic;
        CC_MqttsnSubscribeHandle m_subHandle = nullptr;
        CC_MqttsnUnsubscribeHandle m_unsubHandle = nullptr;
        std::uint16_t m_topicId = 0U;
        bool m_acked = false;
        bool m_unsubscribed = false;
    };

    struct State
    {
        std::vector<SubscribeInfo> m_subs;
        std::vector<std::uint8_t> m_gateways;
        unsigned m_nextTickDuration = 0U;
        unsigned m_publishCount = 0U;
        unsigned m_sleepCheckCount = 0U;
        bool m_reinitRequired = true;
        bool m_searchRequired = true;
        bool m_connectRequired = true;
        bool m_connected = false;
        bool m_firstConnect = true;
        bool m_disconnected = false;
        bool m_disconnectInProgress = false;
        bool m_willUpdateComplete = false;
        bool m_willUpdateInProgress = false;
        bool m_sleepComplete = false;
        bool m_sleepInProgress = false;
    };

    std::ostream& debugLog()
    {
        return m_logger.debugLog();
    }

    std::ostream& infoLog()
    {
        return m_logger.infoLog();
    }

    std::ostream& errorLog()
    {
        return m_logger.errorLog();
    }

    void doReinit()
    {
        infoLog() << "(Re)Initializing..." << std::endl;
        m_state.m_reinitRequired = false;
        m_state.m_disconnected = false;
        m_state.m_publishCount = 0U;
        m_state.m_sleepCheckCount = 0U;
        m_state.m_connected = false;
        m_state.m_willUpdateComplete = false;
        m_state.m_willUpdateInProgress = false;
        m_state.m_sleepComplete = false;
        m_state.m_sleepInProgress = false;
    }

    void doSearch()
    {
        infoLog() << "Searching for gateway..." << std::endl;
        auto ec = cc_mqttsn_##NAME##client_search(m_client.get(), &AflFuzzImpl::searchCompleteCb, this);
        if (ec == CC_MqttsnErrorCode_NotSupported) {
            infoLog() << "Searching is not supported." << std::endl;
            m_state.m_searchRequired = false;
            return;
        }

        if (ec != CC_MqttsnErrorCode_Success) {
            errorLog() << "Unexpected failure in attempt to perform search\n";
            exit(-1);
        } 
    }

    void doConnect()
    {
        m_state.m_connected = false;
        
        infoLog() << "Connecting..." << std::endl;
        CC_MqttsnErrorCode ec = CC_MqttsnErrorCode_ValuesLimit;
        auto connect = cc_mqttsn_##NAME##client_connect_prepare(m_client.get(), &ec);
        assert(connect != nullptr);
        assert(ec == CC_MqttsnErrorCode_Success);
        if (connect == nullptr) {
            errorLog() << "Unexpected failure in connect allocation\n";
            exit(-1);
        }

        CC_MqttsnConnectConfig config;
        cc_mqttsn_##NAME##client_connect_init_config(&config);
        config.m_cleanSession = m_state.m_firstConnect || m_opts.clientId().empty();

        auto clientId = m_opts.clientId();
        if (!clientId.empty()) {
            config.m_clientId = clientId.c_str();
        }
        
        ec = cc_mqttsn_##NAME##client_connect_config(connect, &config);
        assert(ec == CC_MqttsnErrorCode_Success);
        if (ec != CC_MqttsnErrorCode_Success) {
            errorLog() << "Unexpected failure in connect basic configuration\n";
            exit(-1);
        }   

        auto willTopic = m_opts.willTopic();
        if ((!willTopic.empty()) && m_state.m_firstConnect) {
            auto willData = m_opts.willData();
            CC_MqttsnWillConfig willConfig;
            cc_mqttsn_##NAME##client_connect_init_config_will(&willConfig);

            willConfig.m_topic = willTopic.c_str();
            willConfig.m_data = reinterpret_cast<const std::uint8_t*>(willData.data());
            willConfig.m_dataLen = static_cast<decltype(willConfig.m_dataLen)>(willData.size());            
            ec = cc_mqttsn_##NAME##client_connect_config_will(connect, &willConfig);
            if ((ec != CC_MqttsnErrorCode_Success) && 
                (ec != CC_MqttsnErrorCode_NotSupported)) {
                
                errorLog() << "Unexpected failure in configuring will\n";
                exit(-1);                
            }
        }

        ec = cc_mqttsn_##NAME##client_connect_send(connect, &AflFuzzImpl::connectCompleteCb, this);
        assert(ec == CC_MqttsnErrorCode_Success);
        if (ec != CC_MqttsnErrorCode_Success) {
            errorLog() << "Unexpected failure in sending connect request\n";
            exit(-1);
        }   

        m_state.m_connectRequired = false;
    }

    void doSubscribeIfNeeded() {
        for (auto& subInfo : m_state.m_subs) {
            if ((subInfo.m_subHandle != nullptr) || (subInfo.m_acked)) {
                // Request is sent
                continue;
            }

            infoLog() << "Attempting subscribe\n";

            CC_MqttsnErrorCode ec = CC_MqttsnErrorCode_ValuesLimit;
            subInfo.m_subHandle = cc_mqttsn_##NAME##client_subscribe_prepare(m_client.get(), &ec);
            
            if (subInfo.m_subHandle == nullptr) {
                errorLog() << "Unexpected failure in subscribe allocation\n";
                subInfo.m_acked = true;
                continue;
            }     

            assert(ec == CC_MqttsnErrorCode_Success);

            CC_MqttsnSubscribeConfig config;
            cc_mqttsn_##NAME##client_subscribe_init_config(&config);

            if (!subInfo.m_topic.empty()) {
                infoLog() << "Adding topic " << subInfo.m_topic << "\n";
                config.m_topic = subInfo.m_topic.c_str();
            }
            else {
                infoLog() << "Adding topic ID " << subInfo.m_topicId << "\n";
                config.m_topicId = subInfo.m_topicId;
            }

            auto termSubReq = 
                [&subInfo]()
                {
                    cc_mqttsn_##NAME##client_subscribe_cancel(subInfo.m_subHandle);
                    subInfo.m_subHandle = nullptr;
                    subInfo.m_acked = true;
                };

            ec = cc_mqttsn_##NAME##client_subscribe_config(subInfo.m_subHandle, &config);
            if (ec != CC_MqttsnErrorCode_Success) {
                errorLog() << "Unexpected failure in configuring subscription";
                termSubReq();
                continue;
            }

            ec = cc_mqttsn_##NAME##client_subscribe_send(subInfo.m_subHandle, &AflFuzzImpl::subscribeCompleteCb, this);
            if (ec != CC_MqttsnErrorCode_Success) {
                errorLog() << "Unexpected failure in sending subscribe request";
                termSubReq();
                continue;
            }             
        }
    }

    bool isSubscribeComplete()
    {
        return         
            std::all_of(
                m_state.m_subs.begin(), m_state.m_subs.end(),
                [](auto& subInfo)
                {
                    return subInfo.m_acked;
                });
    }

    void doUnsubscribeIfNeeded() {

        for (auto& subInfo : m_state.m_subs) {
            if ((subInfo.m_unsubHandle != nullptr) || (subInfo.m_unsubscribed)) {
                // Request is sent / completed
                continue;
            }

            infoLog() << "Attempting unsubscribe\n";

            CC_MqttsnErrorCode ec = CC_MqttsnErrorCode_ValuesLimit;
            subInfo.m_unsubHandle = cc_mqttsn_##NAME##client_unsubscribe_prepare(m_client.get(), &ec);
            if (subInfo.m_unsubHandle == nullptr) {
                errorLog() << "Unexpected failure in unsubscribe allocation\n";
                subInfo.m_unsubscribed = true;
                continue;
            }     

            assert(ec == CC_MqttsnErrorCode_Success);

            CC_MqttsnUnsubscribeConfig config;
            cc_mqttsn_##NAME##client_unsubscribe_init_config(&config);

            if (!subInfo.m_topic.empty()) {
                infoLog() << "Adding topic " << subInfo.m_topic << "\n";
                config.m_topic = subInfo.m_topic.c_str();
            }
            else {
                infoLog() << "Adding topic ID " << subInfo.m_topicId << "\n";
                config.m_topicId = subInfo.m_topicId;
            }      

            auto termSubReq = 
                [&subInfo]()
                {
                    cc_mqttsn_##NAME##client_unsubscribe_cancel(subInfo.m_unsubHandle);
                    subInfo.m_unsubHandle = nullptr;
                    subInfo.m_unsubscribed = true;
                };

            ec = cc_mqttsn_##NAME##client_unsubscribe_config(subInfo.m_unsubHandle, &config);
            if (ec != CC_MqttsnErrorCode_Success) {
                errorLog() << "Unexpected failure in configuring unsubscription";
                termSubReq();
                continue;
            }                  

            ec = cc_mqttsn_##NAME##client_unsubscribe_send(subInfo.m_unsubHandle, &AflFuzzImpl::unsubscribeCompleteCb, this);
            if (ec != CC_MqttsnErrorCode_Success) {
                errorLog() << "Unexpected failure in sending unsubscribe request";
                termSubReq();
                continue;
            }             
        }
    }

    bool isUnsubscribeComplete()
    {
        return
            std::all_of(
                m_state.m_subs.begin(), m_state.m_subs.end(),
                [](auto& subInfo)
                {
                    return subInfo.m_unsubscribed;
                });        
    }

    void doDisconnectIfNeeded() 
    {
        if (m_state.m_disconnected || m_state.m_disconnectInProgress || (!m_state.m_connected)) {
            return;
        }

        auto ec = cc_mqttsn_##NAME##client_disconnect(m_client.get(), &AflFuzzImpl::disconnectCompleteCb, this);
        if (ec != CC_MqttsnErrorCode_Success) {
            errorLog() << "Failed to send disconnect\n";
            return;
        }     

        m_state.m_disconnectInProgress = true;
    }    

    void doWillUpdateIfNeeded()
    {
        if (m_state.m_willUpdateComplete || 
            m_state.m_willUpdateInProgress) {
            return;
        }

        auto updTopic = m_opts.willUpdTopic();
        if (updTopic.empty()) {
            infoLog() << "Will update is not requested\n";
            m_state.m_willUpdateComplete = true;
            return;
        }

        CC_MqttsnWillConfig config;
        cc_mqttsn_##NAME##client_will_init_config(&config);

        auto updData = m_opts.willUpdData();
        config.m_topic = updTopic.c_str();
        config.m_data = reinterpret_cast<const std::uint8_t*>(updData.data());
        config.m_dataLen = static_cast<decltype(config.m_dataLen)>(updData.size());        

        auto ec = cc_mqttsn_##NAME##client_will(m_client.get(), &config, &AflFuzzImpl::willUpdateCompleteCb, this);
        if (ec == CC_MqttsnErrorCode_NotSupported) {
            infoLog() << "Will update is not supported\n";
            m_state.m_willUpdateComplete = true;
            return;            
        }

        if (ec != CC_MqttsnErrorCode_Success) {
            errorLog() << "Unexpected failure in sending will update request";
            m_state.m_willUpdateComplete = true;
            return;
        }

        m_state.m_willUpdateInProgress = true;
    }

    void doSleepIfNeeded()
    {
        if (m_state.m_sleepComplete || 
            m_state.m_sleepInProgress) {
            return;
        }

        infoLog() << "Entering sleep mode\n";
        CC_MqttsnSleepConfig config;
        cc_mqttsn_##NAME##client_sleep_init_config(&config);
        config.m_duration = 100;

        auto ec = cc_mqttsn_##NAME##client_sleep(m_client.get(), &config, &AflFuzzImpl::sleepCompleteCb, this);
        if (ec == CC_MqttsnErrorCode_NotSupported) {
            infoLog() << "Sleep not supported\n";
            m_state.m_sleepComplete = true;
            m_state.m_sleepCheckCount = m_opts.sleepCheckCount();
            return;            
        }   

        m_state.m_sleepInProgress = true;
    }  

    void doCheckMessagesIfNeeded()
    {
        if (cc_mqttsn_##NAME##client_get_connection_status(m_client.get()) != CC_MqttsnConnectionStatus_Asleep) {
            return;
        }  

        if (m_opts.sleepCheckCount() <= m_state.m_sleepCheckCount) {
            return;
        }  

        infoLog() << "Checking messages in asleep mode\n";
        cc_mqttsn_##NAME##client_asleep_check_messages(m_client.get());
        ++m_state.m_sleepCheckCount;
    }  

    bool createGeneratorIfNeeded()
    {
        auto inputFile = m_opts.genInputFile();
        if (inputFile.empty()) {
            return true;
        }        

        m_generator = std::make_unique<Generator>(m_logger, m_opts.minPubCount());
        if (!m_generator->prepare(inputFile)) {
            return false;
        }

        m_generator->setDataReportCb(
            [this](const std::uint8_t* buf, std::size_t bufLen, unsigned broadcastRadius)
            {
                static_cast<void>(broadcastRadius);
            
                m_inData.reserve(m_inData.size() + bufLen);
                m_inData.insert(m_inData.end(), buf, buf + bufLen);
                infoLog() << "Appended " << bufLen << " bytes to buffer, totaling " << m_inData.size() << " bytes\n";
            });

        return true;
    }

    static AflFuzzImpl* asThis(void* data)
    {
        return reinterpret_cast<AflFuzzImpl*>(data);
    }

    static void nextTickProgramCb(void* data, unsigned duration)
    {
        asThis(data)->m_state.m_nextTickDuration = duration;
    }

    static unsigned cancelNextTickWaitCb(void* data)
    {
        auto diff = std::min(asThis(data)->m_state.m_nextTickDuration, 1U);
        asThis(data)->m_state.m_nextTickDuration -= diff;
        return diff;
    }

    static void sendOutputDataCb(void* data, const unsigned char* buf, unsigned bufLen, unsigned broadcastRadius)
    {
        auto& logger = asThis(data)->m_logger;
        logger.infoLog() << "Sending " << bufLen << " bytes (broadcast=" << broadcastRadius << ")\n";    
        if (asThis(data)->m_verbose) {
            auto& out = logger.debugLog();
            out << "Sent bytes: " << std::hex;
            std::copy_n(buf, bufLen, std::ostream_iterator<unsigned>(out, " "));
            out << std::dec << '\n';
        }

        auto& generator = asThis(data)->m_generator;
        if (generator) {
            generator->processData(buf, bufLen);
        }
    }

    static void gatewayDisconnectReportCb(void* data, [[maybe_unused]] CC_MqttsnGatewayDisconnectReason reason)
    {
        asThis(data)->m_logger.infoLog() << "Gateway disconnected\n";
        auto& state = asThis(data)->m_state;
        state.m_disconnected = true;
        state.m_connected = false;
        state.m_reinitRequired = true;
        state.m_searchRequired = true;
        state.m_connectRequired = true;
    }

    static void gwStatusReportCb(void* data, CC_MqttsnGwStatus status, const CC_MqttsnGatewayInfo* info)
    {
        auto thisPtr = asThis(data);

        auto iter = 
            std::find_if(
                thisPtr->m_state.m_gateways.begin(), thisPtr->m_state.m_gateways.end(),
                [info](auto gwId)
                {
                    return gwId == info->m_gwId;
                });        

        static const CC_MqttsnGwStatus AddStatuses[] = {
            CC_MqttsnGwStatus_AddedByGateway,
            CC_MqttsnGwStatus_AddedByClient
        };

        auto addIter = std::find(std::begin(AddStatuses), std::end(AddStatuses), status);
        if (addIter != std::end(AddStatuses)) {
            if (iter == thisPtr->m_state.m_gateways.end()) {
                thisPtr->m_state.m_gateways.push_back(info->m_gwId);
            }

            return;
        }        

        if (iter == thisPtr->m_state.m_gateways.end()) {
            thisPtr->errorLog() << "Unexpected report of gateway status when no gateway is registered" << std::endl;
            exit(-1);
        }

        static const CC_MqttsnGwStatus RemoveStatuses[] = {
            CC_MqttsnGwStatus_Removed
        };

        auto removeIter = std::find(std::begin(RemoveStatuses), std::end(RemoveStatuses), status);
        if (removeIter == std::end(RemoveStatuses)) {
            return;
        }                        

        thisPtr->m_state.m_gateways.erase(iter);
    }

    static void messageReceivedReportCb(void* data, const CC_MqttsnMessageInfo* info)
    {
        auto* thisPtr = asThis(data);
        auto* client = thisPtr->m_client.get();
        thisPtr->m_logger.infoLog() << "Message Received: topic=\"" << 
            std::string((info->m_topic != nullptr) ? info->m_topic : "") << 
            "; topicId=0x" << std::hex << info->m_topicId << "; qos=" << info->m_qos << "\n";

        assert(info != nullptr);

        if (cc_mqttsn_##NAME##client_get_connection_status(client) != CC_MqttsnConnectionStatus_Connected) {
            return;
        }

        CC_MqttsnErrorCode ec = CC_MqttsnErrorCode_ValuesLimit;
        auto* publish = ::cc_mqttsn_##NAME##client_publish_prepare(client, &ec);
        assert(ec == CC_MqttsnErrorCode_Success);
        if (publish == nullptr) {
            thisPtr->errorLog() << "Unexpected failure in publish allocation\n";
            return;
        }        

        CC_MqttsnPublishConfig config;
        ::cc_mqttsn_##NAME##client_publish_init_config(&config);
        config.m_topic = info->m_topic;
        config.m_topicId = info->m_topicId;
        config.m_data = info->m_data;
        config.m_dataLen = info->m_dataLen;
        config.m_qos = info->m_qos;
        config.m_retain = info->m_retained;

        ec = cc_mqttsn_##NAME##client_publish_config(publish, &config);
        if (ec != CC_MqttsnErrorCode_Success) {
            thisPtr->errorLog() << "Unexpected failure in publish configuration\n";
            ::cc_mqttsn_##NAME##client_publish_cancel(publish);
            return;
        }    

        ec = cc_mqttsn_##NAME##client_publish_send(publish, &AflFuzzImpl::publishCompleteCb, thisPtr);
        if (ec != CC_MqttsnErrorCode_Success) {
            thisPtr->errorLog() << "Failure to publish message\n";
        }        
    }

    static void errorLogCb(void* data, const char* msg)
    {
        asThis(data)->m_logger.errorLog() << msg << '\n';
    }

    static void searchCompleteCb(void* data, CC_MqttsnAsyncOpStatus status, const CC_MqttsnGatewayInfo* info)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;

        do {
            if (status != CC_MqttsnAsyncOpStatus_Complete) {
                break;
            }

            assert(info != nullptr);
            auto iter = std::find(state.m_gateways.begin(), state.m_gateways.end(), info->m_gwId);
            if (iter == state.m_gateways.end()) {
                state.m_gateways.push_back(info->m_gwId);
            }

            state.m_searchRequired = false;
            return;
        } while (false);

        state.m_searchRequired = true;  
    }

    static void connectCompleteCb(void* data, CC_MqttsnAsyncOpStatus status, const CC_MqttsnConnectInfo* info)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;

        do {
            if (status != CC_MqttsnAsyncOpStatus_Complete) {
                break;
            }

            assert(info != nullptr);
            if (CC_MqttsnReturnCode_Accepted != info->m_returnCode) {
                break;
            }

            thisPtr->infoLog() << "Connected" << std::endl;

            assert(cc_mqttsn_##NAME##client_get_connection_status(thisPtr->m_client.get()) == CC_MqttsnConnectionStatus_Connected);

            bool cleanSession = state.m_firstConnect || thisPtr->m_opts.clientId().empty();

            if (cleanSession) {
                thisPtr->infoLog() << "Cleaning previous subscriptions\n";
                for (auto& subInfo : state.m_subs) {
                    assert(subInfo.m_subHandle == nullptr);
                    assert(subInfo.m_unsubHandle == nullptr);
                    subInfo.m_acked = false;
                    subInfo.m_unsubscribed = false;
                }
            }

            state.m_connectRequired = false;
            state.m_connected = true;
            state.m_disconnected = false;
            state.m_firstConnect = false;
            return;
        } while (false);

        state.m_connectRequired = true;
        state.m_connected = false;
        state.m_reinitRequired = true;    
    }  

    static void subscribeCompleteCb(void* data, CC_MqttsnSubscribeHandle handle, CC_MqttsnAsyncOpStatus status, [[maybe_unused]] const CC_MqttsnSubscribeInfo* info)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        auto iter = 
            std::find_if(
                state.m_subs.begin(), state.m_subs.end(),
                [handle](auto& info)
                {
                    return info.m_subHandle == handle;
                });
        
        if (iter == state.m_subs.end()) {
            thisPtr->errorLog() << "Unexpected handle of the subscribe completion\n";
            exit(-1);
        }

        assert(!iter->m_acked);
        iter->m_subHandle = nullptr;
        if (status != CC_MqttsnAsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Subscribe operation is terminated\n";
            return;
        }

        iter->m_acked = true;
    } 

    static void publishCompleteCb(
        void* data, 
        [[maybe_unused]] CC_MqttsnPublishHandle handle, 
        CC_MqttsnAsyncOpStatus status, 
        [[maybe_unused]] const CC_MqttsnPublishInfo* info)
    {
        auto* thisPtr = asThis(data);
        if (status != CC_MqttsnAsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Publish operation is terminated\n";
            return;
        }

        ++thisPtr->m_state.m_publishCount;
    }          

    static void unsubscribeCompleteCb(void* data, CC_MqttsnUnsubscribeHandle handle, CC_MqttsnAsyncOpStatus status)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        auto iter = 
            std::find_if(
                state.m_subs.begin(), state.m_subs.end(),
                [handle](auto& info)
                {
                    return info.m_unsubHandle == handle;
                });
        
        if (iter == state.m_subs.end()) {
            thisPtr->errorLog() << "Unexpected handle of the unsubscribe completion\n";
            exit(-1);
        }

        assert(!iter->m_unsubscribed);
        iter->m_unsubHandle = nullptr;
        if (status != CC_MqttsnAsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Unsubscribe operation is terminated\n";
            return;
        }

        iter->m_unsubscribed = true;
    }   

    static void disconnectCompleteCb(void* data, [[maybe_unused]] CC_MqttsnAsyncOpStatus status)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        state.m_disconnectInProgress = false;
        state.m_disconnected = true;
        state.m_reinitRequired = true;
        state.m_connected = false;
    }    

    static void willUpdateCompleteCb(void* data, CC_MqttsnAsyncOpStatus status, [[maybe_unused]] const CC_MqttsnWillInfo* info)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        state.m_willUpdateInProgress = false;

        if (status != CC_MqttsnAsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Will update operation is terminated\n";
            return;
        }

        state.m_willUpdateComplete = true;
    }  

    static void sleepCompleteCb(void* data, CC_MqttsnAsyncOpStatus status)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        state.m_sleepInProgress = false;

        if (status != CC_MqttsnAsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Sleep operation is terminated\n";
            return;
        }

        state.m_sleepComplete = true;
        state.m_connected = false;
        thisPtr->infoLog() << "Sleeping\n";
    }             

    const ProgramOptions& m_opts;
    Logger& m_logger;
    ClientPtr m_client;
    GeneratorPtr m_generator;
    std::vector<std::uint8_t> m_inData;
    State m_state;
    bool m_verbose = false;
}; 

AflFuzz::AflFuzz(const ProgramOptions& opts, Logger& logger) : 
    m_impl(std::make_unique<AflFuzzImpl>(opts, logger))
{
}   

AflFuzz::~AflFuzz() = default;

bool AflFuzz::init()
{
    return m_impl->init();
}

void AflFuzz::run()
{
    m_impl->run();
}

} // namespace cc_mqttsn_client_afl_fuzz
